from typing import Any, Optional

CONTENT: list[int | str]
RUN_TEXT: list[int | str]
TAB_CONTENT: list[int | str]
TAB_1_CONTENT: list[int | str]
SINGLE_COLUMN: list[int | str]
SINGLE_COLUMN_TAB: list[int | str]
SECTION_LIST: list[int | str]
SECTION_LIST_ITEM: list[int | str]
ITEM_SECTION: list[int | str]
MUSIC_SHELF: list[int | str]
GRID: list[int | str]
GRID_ITEMS: list[int | str]
MENU: list[int | str]
MENU_ITEMS: list[int | str]
MENU_LIKE_STATUS: list[int | str]
MENU_SERVICE: list[int | str]
TOGGLE_MENU: str
PLAY_BUTTON: list[int | str]
NAVIGATION_BROWSE: list[int | str]
NAVIGATION_BROWSE_ID: list[int | str]
PAGE_TYPE: list[int | str]
WATCH_VIDEO_ID: list[int | str]
NAVIGATION_VIDEO_ID: list[int | str]
NAVIGATION_PLAYLIST_ID: list[int | str]
NAVIGATION_WATCH_PLAYLIST_ID: list[int | str]
NAVIGATION_VIDEO_TYPE: list[int | str]
TITLE: list[int | str]
TITLE_TEXT: list[int | str]
TEXT_RUNS: list[int | str]
TEXT_RUN: list[int | str]
TEXT_RUN_TEXT: list[int | str]
SUBTITLE: list[int | str]
SUBTITLE_RUNS: list[int | str]
SUBTITLE2: list[int | str]
SUBTITLE3: list[int | str]
THUMBNAIL: list[int | str]
THUMBNAILS: list[int | str]
THUMBNAIL_RENDERER: list[int | str]
THUMBNAIL_CROPPED: list[int | str]
FEEDBACK_TOKEN: list[int | str]
BADGE_PATH: list[int | str]
BADGE_LABEL: list[int | str]
SUBTITLE_BADGE_LABEL: list[int | str]
CATEGORY_TITLE: list[int | str]
CATEGORY_PARAMS: list[int | str]
MRLIR: str
MTRIR: str
TASTE_PROFILE_ITEMS: list[int | str]
TASTE_PROFILE_ARTIST: list[int | str]
SECTION_LIST_CONTINUATION: list[int | str]
MENU_PLAYLIST_ID: list[int | str]
HEADER_DETAIL: list[int | str]
DESCRIPTION_SHELF: list[int | str]
DESCRIPTION: list[int | str]
CAROUSEL: list[int | str]
IMMERSIVE_CAROUSEL: list[int | str]
CAROUSEL_CONTENTS: list[int | str]
CAROUSEL_TITLE: list[int | str]
CARD_SHELF_TITLE: list[int | str]
FRAMEWORK_MUTATIONS: list[int | str]

def nav(root: dict[str, Any], items: list[str], none_if_absent: bool = False) -> Any: ...
def find_object_by_key(object_list: list[dict[str, Any]], key: str, nested: Optional[str] = None, is_key: bool = False) -> Any: ...
def find_objects_by_key(object_list: list[dict[str, Any]], key: str, nested: Optional[str] = None) -> list[Any]: ...
